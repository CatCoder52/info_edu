(function() {
    let CONTROL_BOX_HEIGHT = 42;
    let MAX_RATING_VALUE = 5;    


    // entry point
    function register(context) {
        let wrapper = $(context.wrapperId);
        context.wrapper = wrapper;
        
        let isInSearch = isInSearchBox(context);
        
        if (!isInSearch) {
            setSharing(context);
            setRating(context);
            wrapper.filter('.se-video-view').find('.se-video-viewer-controls').removeClass('hidden');
        }
        
        if (isInSearch) {
            setContainerDimensionsForSearch(context);
        } else {
            setTimeout(function() {
                setContainerDimensions(context);
            }, 0);
            
            window.addEventListener('resize', function() { 
                setContainerDimensions(context);
            });
        }
    }
    
    function setContainerDimensions(context) {
        let wrapper = context.wrapper.filter('.se-video-view.se-video-frame-container');
        
        let rendererWidth = parseInt(context.contextWidth);
        let rendererHeight = parseInt(context.contextHeight);
        
        if (Number.isNaN(rendererWidth) || Number.isNaN(rendererHeight)) {
            return;
        }
        
        let aspectRatio = (rendererWidth / rendererHeight);
        let minWidth = context.minWidth.replace('px', '');
        let isMobile = $(window).width() < minWidth;
        
        if (isMobile) {
            wrapper.css('display', 'block');
            wrapper.css('width', '100%');

            let height = wrapper.width() / aspectRatio;
            height += CONTROL_BOX_HEIGHT;
            height = Math.floor(height);
            
            wrapper.css('height', height);
            return;
        }
        
        wrapper.css('display', 'inline-block');
        wrapper.css('width', rendererWidth);

        if (wrapper.width() < rendererWidth) {
            // set height by aspect ratio
            let height = wrapper.width() / aspectRatio;
            height += CONTROL_BOX_HEIGHT;
            height = Math.floor(height);
            
            wrapper.css("height", height);
        } else {
            let height = rendererHeight;
            height += CONTROL_BOX_HEIGHT;
            height = Math.floor(height);
            
            wrapper.css("height", height);
        }
    }
    
    // set height for spotlight/advanced search view
    function setContainerDimensionsForSearch(context) {
        let wrapper = context.wrapper.filter('.se-video-view.se-video-frame-container');
        
        let width = context.contextWidth;
        let height = '0px';
        
        if (width !== '') {
            // set height by aspect ratio (16:9)
            height = parseInt(width) / (16 / 9);
            height += CONTROL_BOX_HEIGHT;
            height = Math.floor(height);
        } else {
            width = '100%';
        }

        wrapper.css('display', 'block');
        wrapper.css('width', width);
        wrapper.css("height", height);
    }
    
    function isInSearchBox(context) {
        let wrapper = context.wrapper.filter('.se-video-view');

        let item = wrapper.closest('li.content-item');
        let contentList = wrapper.closest('ul.content-list.content');
        let abbreviated = wrapper.closest('div.content.abbreviated.rendered.gallery.file');
        if (contentList.length === 0 || item.length === 0 || abbreviated.length === 0) {
            return false;
        }
        
        return true;
    }
    
    function setRating(context) {
        let wrapper = context.wrapper;
        let ratingControl = wrapper.filter('.se-video-view').find('.se-media-rating-control');
        let initialRating = context.finalRating * MAX_RATING_VALUE;
        
        ratingControl.evolutionStarRating({
            titles: ['','','','','',''], // hide tooltips for each star
            value: initialRating,
            maxValue: MAX_RATING_VALUE,
            isReadOnly: false,
            onRate: function(value) {
                // temporarily disable editing of rating during saving
                ratingControl.evolutionStarRating('readOnly', true);
        
                let rating = ratingControl.evolutionStarRating('val') / MAX_RATING_VALUE;
                
                // perform AJAX-based saving of rating
                jQuery.telligent.evolution.post({
                    url: jQuery.telligent.evolution.site.getBaseUrl() + 'api.ashx/v2/videomanager/rating.json',
                    data: {
                        MediaId: context.mediaId,
                        Rating: rating
                    },
                    success: function(response) {
                        if (response && response.MediaRatingResult) {
                            // set re-calculated rating from result
                            let rating = response.MediaRatingResult.FinalRating * MAX_RATING_VALUE;
                            ratingControl.evolutionStarRating('val', rating);
                            
                            // after a successful save, turn off the read-only state of the control
                            ratingControl.evolutionStarRating('readOnly', false);
                        }
                    },
                    error: function(err) {
                        console.error('Rating control. Error =', err);
                        jQuery.telligent.evolution.notifications.show(context.resources.errorContactAdministrator, { type: 'error' });
                    }
                });
            }
        });
    }
    
    function setSharing(context) {
        if (!context.isUserHasAccess) { return; }
        
        let wrapper = context.wrapper;
        
        let shareCurtain = wrapper.filter('.se-video-view').find('.se-video-modal-curtain');
        let shareModal = wrapper.filter('.se-video-view').find('.se-video-modal');
        let shareModalClose = wrapper.filter('.se-video-view').find('.se-video-modal-close');
        
        let shareOpenButton = wrapper.filter('.se-video-view').find('.se-video-share-open');
        let shareInput = wrapper.filter('.se-video-view').find('.se-video-share-input');
        let shareButton = wrapper.filter('.se-video-view').find('.se-video-share-copy');
        
        shareInput.focus(function() {
           shareInput.select();
        });
        
        shareInput.click(function() {
           shareInput.select();
        });
        
        shareButton.click(function() {
            shareInput.select();
            document.execCommand("copy");
            jQuery.telligent.evolution.notifications.show(context.resources.linkCopied);
        });
        
        shareModalClose.click(function() {
            shareCurtain.addClass('hidden');
            shareModal.addClass('hidden');
        });
        
        shareCurtain.click(function() {
            shareCurtain.addClass('hidden');
            shareModal.addClass('hidden');
        });
        
        shareOpenButton.click(function() {
            shareCurtain.removeClass('hidden');
            shareModal.removeClass('hidden');
            
            setTimeout(function() {
                shareInput.focus();  
            }, 100);
        });
    }
    
    
    // widget namespace declaration
    $.telligent = $.telligent || {};
    $.telligent.evolution = $.telligent.evolution || {};
    $.telligent.evolution.widgets = $.telligent.evolution.widgets || {};
    $.telligent.evolution.widgets.seVideoManagerVideoView = $.telligent.evolution.widgets.seVideoManagerVideoView || {};
    $.telligent.evolution.widgets.seVideoManagerVideoView.register = register;

}());